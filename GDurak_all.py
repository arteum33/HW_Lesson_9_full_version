import random
# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏–∑ 36 –∫–∞—Ä—Ç
# –º–∞—Å—Ç–∏
SPADES = '‚ô†'
HEARTS = '‚ô•'
DIAMS = '‚ô¶'
CLUBS = '‚ô£'
# –Ω–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç
NOMINALS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
# –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –Ω–æ–º–∏–Ω–∞–ª—É
NAME_TO_VALUE = {n: i for i, n in enumerate(NOMINALS)}
# –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ
CARDS_IN_HAND_MAX = 6
N_PLAYERS = 2
# –ø–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞ - 36 –∫–∞—Ä—Ç
DECK = [(nom, suit) for nom in NOMINALS for suit in [SPADES, HEARTS, DIAMS, CLUBS]]
print(str(DECK))


'''
#–°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
class Player:
    def __init__(self, index, cards):
        self.index = index
        self.cards = list(map(tuple, cards))  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π

    def take_cards_from_deck(self, deck: list):
        """
        –í–∑—è—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã
        –ö–æ–ª–æ–¥–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è
        :param deck: —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∫–æ–ª–æ–¥—ã
        """
        lack = max(0, CARDS_IN_HAND_MAX - len(self.cards))
        n = min(len(deck), lack)
        self.add_cards(deck[:n])
        del deck[:n]
        return self

    def sort_hand(self):
        """
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –∏ –º–∞—Å—Ç–∏
        """
        self.cards.sort(key=lambda c: (NAME_TO_VALUE[c[0]], c[1]))
        return self
# –¥–æ–±–æ—Ä –∫–∞—Ä—Ç
    def add_cards(self, cards):
        self.cards += list(cards)
        self.sort_hand()
        return self

    # –≤—Å—è–∫–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

    def __repr__(self):
        return f"Player{self.cards!r}"

    def take_card(self, card):
        self.cards.remove(card)

    @property
    def n_cards(self):
        return len(self.cards)

    def __getitem__(self, item):
        return self.cards[item]
'''


# –∫–ª–∞—Å—Å Durak ‚Äì –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–ª–∞—Å—Å—É –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏:
class Durak:
    def __init__(self, rng: random.Random = None):
        self.rng = rng or random.Random()  # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

        self.deck = list(DECK)  # –∫–æ–ø–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—É
        self.rng.shuffle(self.deck)  # –º–µ—à–∞–µ–º –∫–∞—Ä—Ç—ã –≤ –∫–æ–ø–∏–∏ –∫–æ–ª–æ–¥—ã

        # —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞–∑–¥–∞–µ–º –∏–º –ø–æ 6 –∫–∞—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–π –∫–æ–ª–æ–¥—ã
        self.players = [Player(i, []).take_cards_from_deck(self.deck)
                        for i in range(N_PLAYERS)]

        # –∫–æ–∑—ã—Ä—å - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ä—Ö—É
        self.trump = self.deck[0][1]
        # –∫–ª–∞–¥–µ–º –∫–æ–∑—ã—Ä—å –ø–æ–¥ –Ω–∏–∑ –≤—Ä–∞—â–∞—è —Å–ø–∏—Å–æ–∫ –ø–æ –∫—Ä—É–≥—É –Ω–∞ 1 –Ω–∞–∑–∞–¥
        self.deck = rotate(self.deck, -1)

        # –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ: –∫–ª—é—á - –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏—è - –∑–∞—â–∏—â–∞—é—â–∞—è—Å—è –∏–ª–∏ None
        self.field = {}

        self.attacker_index = 0  # –∏–Ω–¥–µ–∫—Å –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        self.winner = None  # –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è



# —Å–¥–≤–∏–≥–∞–µ—Ç —Ü–∏–∫–ª–∏—á–Ω–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ n –ø–æ–∑–∏—Ü–∏–π –≤–ª–µ–≤–æ (n < 0) –∏–ª–∏ –≤–ø—Ä–∞–≤–æ (n > 0)
def rotate(l, n):
    return l[n:] + l[:n]


'''
# –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–¥–µ—Å—å ‚Äì —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äì –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –æ—Ç–±–∏–≤–∞—é—â–∞—è –∫–∞—Ä—Ç–∞ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è) –∏–ª–∏ None (–µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–±–∏–ª—Å—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ–π –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã).
    # 
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∫–∞—Ä—Ç –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∏–º —Ç–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:
'''
@property
def attacking_cards(self):
    """
    –°–ø–∏—Å–æ–∫ –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç
    """
    return list(filter(bool, self.field.keys()))

@property
def defending_cards(self):
    """
    –°–ø–∏—Å–æ–∫ –æ—Ç–±–∏–≤–∞—é—â–∏—Ö –∫–∞—Ä—Ç (—Ñ–∏–ª—å—Ä—Ç—Ä—É–µ–º None)
    """
    return list(filter(bool, self.field.values()))

@property
def any_unbeaten_card(self):
    """
    –ï—Å—Ç—å –ª–∏ –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã
    """
    return any(c is None for c in self.defending_cards)

'''
# –ê —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–º–æ–≥–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫, –∞ –∫—Ç–æ –µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫:
'''


@property
def current_player(self):
    return self.players[self.attacker_index]


@property
def opponent_player(self):
    return self.players[(self.attacker_index + 1) % N_PLAYERS]

'''
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã:
'''


def attack(self, card):
    assert not self.winner  # –∏–≥—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–Ω—á–µ–Ω–∞!

    # –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª–µ? (–ø–æ –º–∞—Å—Ç–∏ –∏–ª–∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É)
    if not self.can_add_to_field(card):
        return False
    cur, opp = self.current_player, self.opponent_player
    cur.take_card(card)  # —É–±–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    self.field[card] = None  # –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–µ, –ø–æ–∫–∞ –Ω–µ –±–∏—Ç–∞
    return True



'''
# –•–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Å –ª—é–±–æ–π –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ. –ù–æ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ
# –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –∏–ª–∏ –º–∞—Å—Ç–∏ ‚Äì —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–µ–¥—É–µ—Ç –º–µ—Ç–æ–¥ can_add_to_field:
'''


def can_add_to_field(self, card):
    if not self.field:
        # –Ω–∞ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –º–æ–∂–Ω–æ —Ö–æ–¥–∏—Ç—å –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
        return True

    # —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞—Ç–∞–∫—É—é—â–∏—Ö –∏ –æ—Ç–±–∏–≤–∞—é—â–∏—Ö –∫–∞—Ä—Ç –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞–º
    for attack_card, defend_card in self.field.items():
        if self.card_match(attack_card, card) or self.card_match(defend_card, card):
            return True
    return False


def card_match(self, card1, card2):
    if card1 is None or card2 is None:
        return False
    n1, _ = card1
    n2, _ = card2
    return n1 == n2  # —Ä–∞–≤–Ω—ã –ª–∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∫–∞—Ä—Ç?

'''
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—â–∏—Ç–µ:
'''
def defend(self, attacking_card, defending_card):
    """
    –ó–∞—â–∏—Ç–∞
    :param attacking_card: –∫–∞–∫—É—é –∫–∞—Ä—Ç—É –æ—Ç–±–∏–≤–∞–µ–º
    :param defending_card: –∫–∞–∫–æ–π –∫–∞—Ä—Ç–æ–π –∑–∞—â–∏—â–∞–µ–º—è
    :return: bool - —É—Å–ø–µ—Ö –∏–ª–∏ –Ω–µ—Ç
    """
    assert not self.winner  # –∏–≥—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫–æ–Ω—á–µ–Ω–∞!

    if self.field[attacking_card] is not None:
        # –µ—Å–ª–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–±–∏—Ç–∞ - —É—Ö–æ–¥–∏–º
        return False
    if self.can_beat(attacking_card, defending_card):
        # –µ—Å–ª–∏–∏ –º–æ–∂–µ–º –ø–æ–±–∏—Ç—å, —Ç–æ –∫–ª–∞–¥–µ–º –µ–µ –Ω–∞ –ø–æ–ª–µ
        self.field[attacking_card] = defending_card
        # –∏ –∏–∑—ã–º–∞–µ–º –∏–∑ —Ä—É–∫–∏ –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
        self.opponent_player.take_card(defending_card)
        return True
    return False


'''
# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±—å–µ—Ç –ª–∏ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Ç–æ—Ä—É—é –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ
# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∫–∞—Ä—Ç—ã –≤ —á–∏—Å–ª–æ–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É ‚Äì –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
# (–∏–Ω–¥–µ–∫—Å —à–µ—Å—Ç–µ—Ä–∫–∏ ‚Äì 0, —Å–µ–º–µ—Ä–∫–∏ ‚Äì 1, –∞ —É —Ç—É–∑–∞ ‚Äì 8).
'''


def can_beat(self, card1, card2):
    """
    –ë—å–µ—Ç –ª–∏ card1 –∫–∞—Ä—Ç—É card2
    """
    nom1, suit1 = card1
    nom2, suit2 = card2

    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É-–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –≤ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    nom1 = NAME_TO_VALUE[nom1]
    nom2 = NAME_TO_VALUE[nom2]

    if suit2 == self.trump:
        # –µ—Å–ª–∏ –∫–æ–∑—ã—Ä—å, —Ç–æ –±—å–µ—Ç –ª—é–±–æ–π –Ω–µ –∫–æ–∑—ã—Ä—å –∏–ª–∏ –∫–æ–∑—ã—Ä—å –º–ª–∞–¥—à–µ
        return suit1 != self.trump or nom2 > nom1
    elif suit1 == suit2:
        # –∏–Ω–∞—á–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –º–∞—Å—Ç–∏ –∏ –Ω–æ–º–∏–Ω–∞–ª –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã —Å—Ç–∞—Ä—à–µ –ø–µ—Ä–≤–æ–π
        return nom2 > nom1
    else:
        return False

'''
# –ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ö–æ–¥ finish_turn –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–æ–ª–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–∞–∫–∏–µ
# –≤–∞—Ä–∏–∞–Ω—Ç—ã. 1) –û—Ç–±–∏—Ç—ã –≤—Å–µ –∫–∞—Ä—Ç—ã. –¢–æ–≥–¥–∞ —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—â–∏—â–∞–ª—Å—è. –û–±–∞ –¥–æ–±–∏—Ä–∞—é—Ç –∏–∑ –∫–æ–ª–æ–¥—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —á–∏—Å–ª–æ
#  –∫–∞—Ä—Ç. 2) –ù–µ –æ—Ç–±–∏–ª —á—Ç–æ-—Ç–æ, —Ç–æ–≥–¥–∞ –ø—Ä–∞–≤–æ —Ö–æ–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –∞—Ç–∞–∫—É—é—â–∏–π –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã, –∞ –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ —Å—Ç–æ–ª–∞ –≤—Å–µ
#  –∫–∞—Ä—Ç—ã –∫ —Å–µ–±–µ –≤ —Ä—É–∫—É. 3) –ò–≥—Ä–∞ –∑–∞–≤–µ—à–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∏ –æ–¥–∏–Ω –∏–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–∑–±–∞–≤–∏–ª—Å—è –æ—Ç –≤—Å–µ—Ö
#  –∫–∞—Ä—Ç. –¢–æ—Ç, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã ‚Äì –î–£–†–ê–ö üòâ
'''
# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ö–æ–¥–∞
NORMAL = 'normal'
TOOK_CARDS = '–Ω–µ –æ—Ç–±–ª–∏—Å—è –∏ –∑–∞–±—Ä–∞–ª –∫–∞—Ä—Ç—ã'
GAME_OVER = 'game_over'


@property
def attack_succeed(self):
    return any(def_card is None for def_card in self.field.values())


def finish_turn(self):
    assert not self.winner

    took_cards = False
    if self.attack_succeed:
        # –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –æ—Ç–±–∏–ª—Å—è –≤ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
        self._take_all_field()
        took_cards = True
    else:
        # –±–∏—Ç–æ! –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ (–æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–∏—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—ã)
        self.field = {}

    # –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–æ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ (–º–æ–∂–Ω–æ —Å–¥–≤–∏–≥–∞—Ç—å –Ω–∞ 1, –∏–ª–∏ –Ω–µ—Ç)
    for p in rotate(self.players, self.attacker_index):
        p.take_cards_from_deck(self.deck)

    # –∫–æ–ª–æ–¥–∞ –æ–ø—É—Å—Ç–µ–ª–∞?
    if not self.deck:
        for p in self.players:
            if not p.cards:  # –µ—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã, –æ–Ω –ø–æ–±–µ–¥–∏–ª!
                self.winner = p.index
                return self.GAME_OVER

    if took_cards:
        return self.TOOK_CARDS
    else:
        # –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ –æ—Ç–±–∏–ª—Å—è
        self.attacker_index = self.opponent_player.index
        return self.NORMAL


def _take_all_field(self):
    """
    –°–æ–ø–µ—Ä–Ω–∏–∫ –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ç—Ä—ã —Å–æ —Å—Ç–æ–ª–∞ —Å–µ–±–µ.
    """
    cards = self.attacking_cards + self.defending_cards
    self.opponent_player.add_cards(cards)
    self.field = {}

'''
# –í–æ—Ç –∏ –≤—Å—è –ª–æ–≥–∏–∫–∞. –û–¥–∏–Ω –∞—Ç–∞–∫—É–µ—Ç attack, –¥—Ä—É–≥–æ–π –æ—Ç–±–∏–≤–∞–µ—Ç—Å—è defend. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω finish_turn, —á—Ç–æ–±—ã
# –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥. –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞, –∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Ç–æ –≤ –ø–æ–ª–µ winner –±—É–¥–µ—Ç –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
#
# –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–≥—Ä—É –≤ –∫–æ–Ω—Å–æ–ª–∏, –∫–∞–∫ –±—É–¥—Ç–æ –±—ã –æ–±–∞ –∏–≥—Ä–∞—é—Ç –∑–∞ –æ–¥–Ω–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –§—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#  –∏–≥—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–±—Ä–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ _render.py. –ù–µ –±—É–¥—É –∏—Ö —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω—ã, –∞ –≤ –±—É–¥—É—â–µ–º –º—ã
#  –ø—Ä–∏–∫—Ä—É—Ç–∏–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ–±–æ–ª–æ—á–∫—É –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—è—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å.
'''
'''

'''
from _render import ConsoleRenderer
from durak import Durak
import random

def local_game():
    # rng = random.Random(42)  # –∏–≥—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–Ω–¥–æ–º–æ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    rng = random.Random()  # —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞

    g = Durak(rng=rng)
    renderer = ConsoleRenderer()

    renderer.help()

    while not g.winner:
        renderer.render_game(g, my_index=0)

        renderer.sep()
        choice = input('–í–∞—à –≤—ã–±–æ—Ä: ')
        # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏: –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–±–µ–ª - –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        parts = choice.lower().split(' ')
        if not parts:
            break

        command = parts[0]

        try:
            if command == 'f':
                r = g.finish_turn()
                print(f'–•–æ–¥ –æ–∫–æ–Ω—á–µ–Ω: {r}')
            elif command == 'a':
                index = int(parts[1]) - 1
                card = g.current_player[index]
                if not g.attack(card):
                    print('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å —Å —ç—Ç–æ–π –∫–∞—Ä—Ç—ã!')
            elif command == 'd':
                index = int(parts[1]) - 1
                new_card = g.opponent_player[index]

                # –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞—â–∏—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
                variants = g.defend_variants(new_card)

                if len(variants) == 1:
                    def_index = variants[0]
                else:
                    def_index = int(input(f'–ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç–±–∏—Ç—å {new_card}? ')) - 1

                old_card = list(g.field.keys())[def_index]
                if not g.defend(old_card, new_card):
                    print('–ù–µ –º–æ–∂–µ—Ç–µ —Ç–∞–∫ –æ—Ç–±–∏—Ç—å—Å—è')
            elif command == 'q':
                print('QUIT!')
                break
        except IndexError:
            print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã')
        except ValueError:
            print('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')

        if g.winner:
            print(f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä–æ–∫: #{g.winner + 1}')
            break

if __name__ == '__main__':
    local_game()


'''
'''
render
'''
from durak import Durak


class GameRenderer:
    def render_game(self, durak: Durak, my_index=None):
        ...

    def sep(self):
        ...

    def help(self):
        ...


class ConsoleRenderer(GameRenderer):
    @classmethod
    def card_2_str(cls, card):
        return '[' + ''.join(card) + ']' if card is not None else '[  ]'

    @classmethod
    def cards_2_str(cls, cards, enum=True):
        if enum:
            cards = (f"{i}. {cls.card_2_str(c)}" for i, c in enumerate(cards, start=1))
        else:
            cards = (cls.card_2_str(c) for c in cards)
        return ", ".join(cards)

    def render_game(self, durak: Durak, my_index=None):
        print('-' * 100)

        print(f'–ö–æ–∑—ã—Ä—å ‚Äì [{durak.trump}], {len(durak.deck)} –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å.')

        for player in durak.players:
            marker = " <-- —Ö–æ–¥–∏—Ç" if player.index == durak.attacker_index else ""
            me_marker = " (—ç—Ç–æ —è) " if player.index == my_index else ""
            print(f"{player.index + 1}: {self.cards_2_str(player.cards)}{marker}{me_marker}")

        if durak.field:
            print()

            pairs = list(durak.field.items())
            for i, (ac, dc) in enumerate(pairs, start=1):
                print(f'{i}. –•–æ–¥–∏—Ç: {self.card_2_str(ac)} - –æ—Ç–±–∏—Ç—å—Å—è: {self.card_2_str(dc)}')

    def sep(self):
        print('-' * 100)

    def help(self):
        self.sep()
        print('–ü–æ–º–æ—â—å')
        print('  1. a [–Ω–æ–º–µ—Ä] -- –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ–π')
        print('  2. d [–Ω–æ–º–µ—Ä] -- –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π')
        print('  3. f -- –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥, (–µ—Å–ª–∏ –Ω–µ –æ—Ç–±–∏–ª—Å—è - –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã)')
        print('  3. q -- –≤—ã—Ö–æ–¥')
        self.sep()
'''